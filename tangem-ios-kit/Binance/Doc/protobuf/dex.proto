syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.binance.dex.api.proto";
option java_outer_classname = "Transaction";

// please note the field name is the JSON name.
message StdTx {
    //    uint64 SIZE-OF-ENCODED // varint encoded length of the structure after encoding
    //    0xF0625DEE   // hardcoded, object type prefix in 4 bytes
    repeated bytes msgs = 1; // array of size 1, containing the transaction message, which are one of the transaction type below
    repeated bytes signatures = 2; // array of size 1, containing the standard signature structure of the transaction sender
    string memo = 3; // a short sentence of remark for the transaction. Please only `Transfer` transaction allows 'memo' input, and other transactions with non-empty `Memo` would be rejected.
    int64 source = 4; // an identifier for tools triggerring this transaction, set to zero if unwilling to disclose.
    bytes data = 5; //byte array, reserved for future use
}

message StdSignature {
    // please note there is no type prefix for StdSignature
    message PubKey {
        //        0xEB5AE987 // hardcoded, object type prefix in 4 bytes
        //        bytes // no name or field id, just encode the bytes
    }
    bytes pub_key = 1; // public key bytes of the signer address
    bytes signature = 2; // signature bytes, please check chain access section for signature generation
    int64 account_number = 3; // another identifier of signer, which can be read from chain by account REST API or RPC
    int64 sequence = 4; // sequence number for the next transaction of the client, which can be read fro chain by account REST API or RPC. please check chain acces section for details.
}

// please note the field name is the JSON name.
message NewOrder {
    //    0xCE6DC043 // hardcoded, object type prefix in 4 bytes
    bytes sender = 1; // order originating address
    string id = 2; // order id, optional
    string symbol = 3; // symbol for trading pair in full name of the tokens
    int64 ordertype = 4; // only accept 2 for now, meaning limit order
    int64 side = 5; // 1 for buy and 2 fory sell
    int64 price = 6; // price of the order, which is the real price multiplied by 1e8 (10^8) and rounded to integer
    int64 quantity = 7; // quantity of the order, which is the real price multiplied by 1e8 (10^8) and rounded to integer
    int64 timeinforce = 8; // 1 for Good Till Expire(GTE) order and 3 for Immediate Or Cancel (IOC)
}

// please note the field name is the JSON name.
message CancelOrder {
    //    0x166E681B   // hardcoded, object type prefix in 4 bytes
    bytes sender = 1; // order originating address'
    string symbol = 2; // symbol for trading pair in full name of the tokens
    string refid = 3; // order id of the one to cancel
}

// please note the field name is the JSON name.
message TokenFreeze {
    //    0xE774B32D   // hardcoded, object type prefix in 4 bytes
    bytes from = 1; // owner address
    string symbol = 2; // token symbol, in full name with "-" suffix
    int64 amount = 3; // amount of token to freeze
}

// please note the field name is the JSON name.
message TokenUnfreeze {
    //    0x6515FF0D   // hardcoded, object type prefix in 4 bytes
    bytes from = 1; // owner address
    string symbol = 2; // token symbol, in full name with "-" suffix
    int64 amount = 3; // amount of token to freeze
}

// please note the field name is the JSON name.
message Send {
    //    0x2A2C87FA   // hardcoded, object type prefix in 4 bytes
    message Token {
        string denom = 1;
        int64 amount = 2;
    }
    message Input {
        bytes address = 1;
        repeated Token coins = 2;
    }
    message Output {
        bytes address = 1;
        repeated Token coins = 2;
    }
    repeated Input inputs = 1;
    repeated Output outputs = 2;
}

// please note the field name is the JSON name.
message Vote {
  //    0xA1CADD36	    // hardcoded, object type prefix in 4 bytes
  int64 proposal_id = 1;     // ID of the proposal
  bytes voter = 2;           // address of the voter
  int64 option = 3;         // option from OptionSet chosen by the voter,
}
