//
//  VeChainAddressTests.swift
//  TangemApp
//
//  Created by [REDACTED_AUTHOR]
//  Copyright Â© 2025 Tangem AG. All rights reserved.
//

import Foundation
import WalletCore
import TangemSdk
@testable import BlockchainSdk
import Testing

struct VeChainAddressTests {
    @Test
    func addressGeneration() throws {
        let addressServiceFactory = AddressServiceFactory(blockchain: .veChain(testnet: false))
        let addressService = addressServiceFactory.makeAddressService()

        // Private key for the "tiny escape drive pupil flavor endless love walk gadget match filter luxury" mnemonic
        let privateKeyRaw = Data(hexString: "0x11573efc409f42822eb39ca248d5e39edcf3377f0d4049b633d4dac3a54d5e71")
        let privateKey = try #require(PrivateKey(data: privateKeyRaw))

        let publicKeyRaw = privateKey.getPublicKeySecp256k1(compressed: false).data
        let publicKey = Wallet.PublicKey(seedKey: publicKeyRaw, derivationType: nil)

        #expect(throws: Never.self) {
            try addressService.makeAddress(from: Keys.AddressesKeys.secpCompressedKey)
        }
        #expect(throws: Never.self) {
            try addressService.makeAddress(from: Keys.AddressesKeys.secpDecompressedKey)
        }
        #expect(throws: Never.self) {
            try addressService.makeAddress(for: publicKey, with: .default)
        }
        #expect(throws: (any Error).self) {
            try addressService.makeAddress(from: Keys.AddressesKeys.edKey)
        }

        // Generated by Trust Wallet / official VeChain wallet (https://www.veworld.net/) / Wallet 2.0
        // for the "tiny escape drive pupil flavor endless love walk gadget match filter luxury" mnemonic
        let expectedAddress = "0xce270ba263dbB31FEb49Ec769A2C50FeCE7a6130"
        let address = try addressService.makeAddress(for: publicKey, with: .default)

        #expect(AddressType.default.defaultLocalizedName == address.localizedName)
        #expect(expectedAddress == address.value)
    }

    @Test(arguments: [
        "0x154D3D331CAAd4c8A14a3CbFd36Fd0640ADB76ad",
        "0xFF5ba88a17b2E16D23FF6647E9052E937AcB1406",
        "0x8E2b322FB0d0b7dC83783678c4d10ED64Af92dB4",
        "0xe01f4CeC65D6F0BA0eC92e96012339eDbAc634bb",
        "0xFF5ba88a17b2E16D23FF6647E9052E937AcB1406",
    ])
    func addressValidation_validAddresses(address: String) {
        let addressServiceFactory = AddressServiceFactory(blockchain: .veChain(testnet: false))
        let addressService = addressServiceFactory.makeAddressService()
        #expect(addressService.validate(address))
    }

    @Test(arguments: [
        "0x11e1B586dd370471D0B52046EE3D4309a6c29C6",
        "0xddde7ddd4111A54eFF5679CDE026913692e0B71cC",
        "c8177346deb2bab5390f472c338351e15e05063a",
        "me@google.com",
        ""
    ])
    func addressValidation_invalidAddresses(address: String) {
        let addressServiceFactory = AddressServiceFactory(blockchain: .veChain(testnet: false))
        let addressService = addressServiceFactory.makeAddressService()
        #expect(!addressService.validate(address))
    }
}
