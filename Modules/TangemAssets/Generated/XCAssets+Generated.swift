// swiftlint:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen
// Based on: https://github.com/SwiftGen/SwiftGen/blob/stable/Documentation/templates/xcassets/swift5.md

import SwiftUI

// MARK: - Asset Catalogs

public enum Assets {
      public enum Accounts {
        public static let airplane = ImageType(name: "airplane")
        public static let beach = ImageType(name: "beach")
        public static let bookmark = ImageType(name: "bookmark")
        public static let clock = ImageType(name: "clock")
        public static let family = ImageType(name: "family")
        public static let favorite = ImageType(name: "favorite")
        public static let gift = ImageType(name: "gift")
        public static let home = ImageType(name: "home")
        public static let letter = ImageType(name: "letter")
        public static let money = ImageType(name: "money")
        public static let package = ImageType(name: "package")
        public static let safe = ImageType(name: "safe")
        public static let shirt = ImageType(name: "shirt")
        public static let shoppingBasket = ImageType(name: "shoppingBasket")
        public static let starAccounts = ImageType(name: "star_accounts")
        public static let startUp = ImageType(name: "startUp")
        public static let user = ImageType(name: "user")
        public static let walletAccounts = ImageType(name: "wallet_accounts")
      }
      public static let arrowRightUpMini = ImageType(name: "ArrowRightUpMini")
      public enum Biometry {
        public static let faceId = ImageType(name: "FaceId")
        public static let touchId = ImageType(name: "TouchId")
      }
      public enum Cards {
        public static let btcNew2 = ImageType(name: "BTC_New_2")
        public static let btcNew3 = ImageType(name: "BTC_New_3")
        public static let blushSkyDouble = ImageType(name: "BlushSkyDouble")
        public static let blushSkyTriple = ImageType(name: "BlushSkyTriple")
        public static let cryptorgSet2 = ImageType(name: "CRYPTORG_SET_2")
        public static let cryptorgSet3 = ImageType(name: "CRYPTORG_SET_3")
        public static let cryptoCaseySet2 = ImageType(name: "CRYPTO_ CASEY_SET_2")
        public static let cryptoCaseySet3 = ImageType(name: "CRYPTO_ CASEY_SET_3")
        public static let electraSeaDouble = ImageType(name: "ElectraSeaDouble")
        public static let electraSeaTriple = ImageType(name: "ElectraSeaTriple")
        public static let hyperBlueDouble = ImageType(name: "HyperBlueDouble")
        public static let hyperBlueTriple = ImageType(name: "HyperBlueTriple")
        public static let kaspaMint2 = ImageType(name: "Kaspa_Mint_2")
        public static let kaspaMint3 = ImageType(name: "Kaspa_Mint_3")
        public static let stealthWalletSET2 = ImageType(name: "Stealth_Wallet_SET_2")
        public static let stealthWalletSET3 = ImageType(name: "Stealth_Wallet_SET_3")
        public static let babyDogeDouble = ImageType(name: "babyDogeDouble")
        public static let babyDogeTriple = ImageType(name: "babyDogeTriple")
        public static let badIdeaDouble = ImageType(name: "badIdeaDouble")
        public static let badIdeaTriple = ImageType(name: "badIdeaTriple")
        public static let bitcoinPizzaDouble = ImageType(name: "bitcoinPizzaDouble")
        public static let bitcoinPizzaTriple = ImageType(name: "bitcoinPizzaTriple")
        public static let btc365Double = ImageType(name: "btc365Double")
        public static let btc365Triple = ImageType(name: "btc365Triple")
        public static let cashClubGoldDouble = ImageType(name: "cashClubGoldDouble")
        public static let cashClubGoldTriple = ImageType(name: "cashClubGoldTriple")
        public static let changeNowDouble = ImageType(name: "changeNowDouble")
        public static let changeNowTriple = ImageType(name: "changeNowTriple")
        public static let chilizDouble = ImageType(name: "chilizDouble")
        public static let chilizTriple = ImageType(name: "chilizTriple")
        public static let coinMetricaDouble = ImageType(name: "coinMetricaDouble")
        public static let coinMetricaTriple = ImageType(name: "coinMetricaTriple")
        public static let cryptosethDouble = ImageType(name: "cryptosethDouble")
        public static let cryptosethTriple = ImageType(name: "cryptosethTriple")
        public static let developer = ImageType(name: "developer")
        public static let getsmineDouble = ImageType(name: "getsmineDouble")
        public static let getsmineTriple = ImageType(name: "getsmineTriple")
        public static let ghoadDouble = ImageType(name: "ghoadDouble")
        public static let ghoadTriple = ImageType(name: "ghoadTriple")
        public static let grimDouble = ImageType(name: "grimDouble")
        public static let grimTriple = ImageType(name: "grimTriple")
        public static let hodlDouble = ImageType(name: "hodlDouble")
        public static let hodlTriple = ImageType(name: "hodlTriple")
        public static let jrDouble = ImageType(name: "jrDouble")
        public static let jrTriple = ImageType(name: "jrTriple")
        public static let kangoDouble = ImageType(name: "kangoDouble")
        public static let kangoTriple = ImageType(name: "kangoTriple")
        public static let kaspa2Double = ImageType(name: "kaspa2Double")
        public static let kaspa2Triple = ImageType(name: "kaspa2Triple")
        public static let kaspaDouble = ImageType(name: "kaspaDouble")
        public static let kaspaResellerDouble = ImageType(name: "kaspaResellerDouble")
        public static let kaspaResellerTriple = ImageType(name: "kaspaResellerTriple")
        public static let kaspaTriple = ImageType(name: "kaspaTriple")
        public static let kasperDouble = ImageType(name: "kasperDouble")
        public static let kasperTriple = ImageType(name: "kasperTriple")
        public static let kaspyDouble = ImageType(name: "kaspyDouble")
        public static let kaspyTriple = ImageType(name: "kaspyTriple")
        public static let keiroDouble = ImageType(name: "keiroDouble")
        public static let keiroTriple = ImageType(name: "keiroTriple")
        public static let kishuDouble = ImageType(name: "kishuDouble")
        public static let kishuTriple = ImageType(name: "kishuTriple")
        public static let konanDouble = ImageType(name: "konanDouble")
        public static let konanTriple = ImageType(name: "konanTriple")
        public static let kroakDouble = ImageType(name: "kroakDouble")
        public static let kroakTriple = ImageType(name: "kroakTriple")
        public static let lemonAquaGrapefruit = ImageType(name: "lemonAquaGrapefruit")
        public static let lockedMoneyDouble = ImageType(name: "lockedMoneyDouble")
        public static let lockedMoneyTriple = ImageType(name: "lockedMoneyTriple")
        public static let multiWalletWhite = ImageType(name: "multiWalletWhite")
        public static let multiWalletWhiteDouble = ImageType(name: "multiWalletWhiteDouble")
        public static let multiWalletWhiteTriple = ImageType(name: "multiWalletWhiteTriple")
        public static let neiroDouble = ImageType(name: "neiroDouble")
        public static let neiroTriple = ImageType(name: "neiroTriple")
        public static let newWorldEliteDouble = ImageType(name: "newWorldEliteDouble")
        public static let newWorldEliteTriple = ImageType(name: "newWorldEliteTriple")
        public static let noteBinance = ImageType(name: "noteBinance")
        public static let noteBitcoin = ImageType(name: "noteBitcoin")
        public static let noteCardano = ImageType(name: "noteCardano")
        public static let noteDoge = ImageType(name: "noteDoge")
        public static let noteEthereum = ImageType(name: "noteEthereum")
        public static let noteXrp = ImageType(name: "noteXrp")
        public static let passimPayDouble = ImageType(name: "passimPayDouble")
        public static let passimPayTriple = ImageType(name: "passimPayTriple")
        public static let peachAirGlass = ImageType(name: "peachAirGlass")
        public static let pepeDouble = ImageType(name: "pepeDouble")
        public static let pepeTriple = ImageType(name: "pepeTriple")
        public static let pizzaDayWalletDouble = ImageType(name: "pizzaDayWalletDouble")
        public static let pizzaDayWalletTriple = ImageType(name: "pizzaDayWalletTriple")
        public static let ramenCatDouble = ImageType(name: "ramenCatDouble")
        public static let ramenCatTriple = ImageType(name: "ramenCatTriple")
        public static let redPandaDouble = ImageType(name: "redPandaDouble")
        public static let redPandaTriple = ImageType(name: "redPandaTriple")
        public static let ring1card = ImageType(name: "ring_1card")
        public static let ring2cards = ImageType(name: "ring_2cards")
        public static let rizoDouble = ImageType(name: "rizoDouble")
        public static let rizoTriple = ImageType(name: "rizoTriple")
        public static let s2c = ImageType(name: "s2c")
        public static let sakuraDouble = ImageType(name: "sakuraDouble")
        public static let sakuraTriple = ImageType(name: "sakuraTriple")
        public static let satoshiFriendsDouble = ImageType(name: "satoshiFriendsDouble")
        public static let satoshiFriendsTriple = ImageType(name: "satoshiFriendsTriple")
        public static let shibaDouble = ImageType(name: "shibaDouble")
        public static let shibaSingle = ImageType(name: "shibaSingle")
        public static let shibaTriple = ImageType(name: "shibaTriple")
        public static let sinCityDouble = ImageType(name: "sinCityDouble")
        public static let sinCityTriple = ImageType(name: "sinCityTriple")
        public static let springBloomDouble = ImageType(name: "springBloomDouble")
        public static let springBloomTriple = ImageType(name: "springBloomTriple")
        public static let sunDropDouble = ImageType(name: "sunDropDouble")
        public static let sunDropTriple = ImageType(name: "sunDropTriple")
        public static let tgDouble = ImageType(name: "tgDouble")
        public static let tgTriple = ImageType(name: "tgTriple")
        public static let tronDouble = ImageType(name: "tronDouble")
        public static let tronTriple = ImageType(name: "tronTriple")
        public static let twin = ImageType(name: "twin")
        public static let twins = ImageType(name: "twins")
        public static let ubitDouble = ImageType(name: "ubitDouble")
        public static let ubitTriple = ImageType(name: "ubitTriple")
        public static let usaDouble = ImageType(name: "usaDouble")
        public static let usaTriple = ImageType(name: "usaTriple")
        public static let vechainWalletDouble = ImageType(name: "vechainWalletDouble")
        public static let vechainWalletTriple = ImageType(name: "vechainWalletTriple")
        public static let visa = ImageType(name: "visa")
        public static let vnishDouble = ImageType(name: "vnishDouble")
        public static let vnishTriple = ImageType(name: "vnishTriple")
        public static let voltInuDouble = ImageType(name: "voltInuDouble")
        public static let voltInuTriple = ImageType(name: "voltInuTriple")
        public static let wallet = ImageType(name: "wallet")
        public static let wallet2Double = ImageType(name: "wallet2Double")
        public static let wallet2Triple = ImageType(name: "wallet2Triple")
        public static let wallet2WhiteDouble = ImageType(name: "wallet2WhiteDouble")
        public static let wallet2WhiteTriple = ImageType(name: "wallet2WhiteTriple")
        public static let walletAvroraDouble = ImageType(name: "walletAvroraDouble")
        public static let walletAvroraTriple = ImageType(name: "walletAvroraTriple")
        public static let walletDouble = ImageType(name: "walletDouble")
        public static let walletSingle = ImageType(name: "walletSingle")
        public static let walletTraillantDouble = ImageType(name: "walletTraillantDouble")
        public static let walletTraillantTriple = ImageType(name: "walletTraillantTriple")
        public static let walletTriple = ImageType(name: "walletTriple")
        public static let wildGoatDouble = ImageType(name: "wildGoatDouble")
        public static let wildGoatTriple = ImageType(name: "wildGoatTriple")
        public static let winter2Double = ImageType(name: "winter2Double")
        public static let winter2Triple = ImageType(name: "winter2Triple")
      }
      public static let chatSettings = ImageType(name: "Chat_settings")
      public enum Checked {
        public static let disabled = ImageType(name: "disabled")
        public static let off = ImageType(name: "off")
        public static let on = ImageType(name: "on")
      }
      public static let clear = ImageType(name: "Clear")
      public static let clearColor1px = ImageType(name: "ClearColor1px")
      public enum Express {
        public static let bestRateStarIcon = ImageType(name: "bestRateStarIcon")
      }
      public enum FeeOptions {
        public static let customFeeIcon = ImageType(name: "customFeeIcon")
        public static let fastFeeIcon = ImageType(name: "fastFeeIcon")
        public static let marketFeeIcon = ImageType(name: "marketFeeIcon")
        public static let slowFeeIcon = ImageType(name: "slowFeeIcon")
        public static let suggestedFeeIcon = ImageType(name: "suggestedFeeIcon")
      }
      public enum Glyphs {
        public static let approvaleNew = ImageType(name: "approvale-new")
        public static let chevronDownNew = ImageType(name: "chevron-down-new")
        public static let chevronRightNew = ImageType(name: "chevron-right-new")
        public static let chevron20LeftButtonNew = ImageType(name: "chevron20-left-button-new")
        public static let connectNew = ImageType(name: "connect-new")
        public static let convertMiniNew = ImageType(name: "convert-mini-new")
        public static let copy = ImageType(name: "copy")
        public static let cross20ButtonNew = ImageType(name: "cross20-button-new")
        public static let docNew = ImageType(name: "doc-new")
        public static let editNew = ImageType(name: "edit-new")
        public static let exchange = ImageType(name: "exchange")
        public static let explore = ImageType(name: "explore")
        public static let feeNew = ImageType(name: "fee-new")
        public static let knightShield = ImageType(name: "knight-shield")
        public static let load = ImageType(name: "load")
        public static let networkNew = ImageType(name: "network-new")
        public static let recieveNew = ImageType(name: "recieve-new")
        public static let scanQrIcon = ImageType(name: "scan-qr-icon")
        public static let selectIcon = ImageType(name: "select-icon")
        public static let sendNew = ImageType(name: "send-new")
        public static let stackNew = ImageType(name: "stack-new")
        public static let userSquare = ImageType(name: "user-square")
        public static let verified = ImageType(name: "verified")
        public static let walletNew = ImageType(name: "wallet-new")
      }
      public enum LearnAndEarn {
        public static let oneInchLogoBig = ImageType(name: "one-inch-logo-big")
      }
      public enum MobileWallet {
        public static let mobileWallet = ImageType(name: "mobileWallet")
        public static let mobileWalletInFrame = ImageType(name: "mobileWalletInFrame")
      }
      public enum Nft {
        public enum Collections {
          public static let noCollections = ImageType(name: "noCollections")
        }
        public static let assetImagePlaceholder = ImageType(name: "assetImagePlaceholder")
        public static let noNFT = ImageType(name: "noNFT")
      }
      public static let notificationBell = ImageType(name: "NotificationBell")
      public static let notificationBulletItemOne = ImageType(name: "NotificationBulletItemOne")
      public static let notificationBulletItemThree = ImageType(name: "NotificationBulletItemThree")
      public static let notificationBulletItemTwo = ImageType(name: "NotificationBulletItemTwo")
      public enum Onboarding {
        public static let darkCard = ImageType(name: "dark_card")
        public static let designCheckmark = ImageType(name: "design.checkmark")
        public static let inProgress64 = ImageType(name: "inProgress64")
        public static let inputWithLock = ImageType(name: "inputWithLock")
        public static let lightCard = ImageType(name: "light_card")
        public static let listWithPencil = ImageType(name: "listWithPencil")
        public static let refresh = ImageType(name: "refresh")
        public static let successCheckmark = ImageType(name: "successCheckmark")
        public static let tangemPayWc = ImageType(name: "tangem_pay_wc")
        public static let walletCard = ImageType(name: "wallet_card")
      }
      public enum OrganizeTokens {
        public static let byBalanceSortIcon = ImageType(name: "ByBalanceSortIcon")
        public static let filterIcon = ImageType(name: "FilterIcon")
        public static let groupDragAndDropIcon = ImageType(name: "GroupDragAndDropIcon")
        public static let itemDragAndDropIcon = ImageType(name: "ItemDragAndDropIcon")
        public static let makeGroupIcon = ImageType(name: "MakeGroupIcon")
      }
      public enum Portfolio {
        public static let buy12 = ImageType(name: "buy12")
        public static let exchange12 = ImageType(name: "exchange12")
        public static let receive12 = ImageType(name: "receive12")
        public static let stake12 = ImageType(name: "stake12")
      }
      public static let reload = ImageType(name: "Reload")
      public enum Send {
        public static let arrowDown = ImageType(name: "ArrowDown")
        public static let arrowUp = ImageType(name: "ArrowUp")
      }
      public enum SocialNetwork {
        public static let discord = ImageType(name: "discord")
        public static let facebook = ImageType(name: "facebook")
        public static let github = ImageType(name: "github")
        public static let instagram = ImageType(name: "instagram")
        public static let linkedin = ImageType(name: "linkedin")
        public static let reddit = ImageType(name: "reddit")
        public static let telegram = ImageType(name: "telegram")
        public static let twitter = ImageType(name: "twitter")
        public static let youtube = ImageType(name: "youtube")
      }
      public static let starThick = ImageType(name: "StarThick")
      public static let starThickFill = ImageType(name: "StarThickFill")
      public enum Stories {
        public static let currency0 = ImageType(name: "currency-0")
        public static let currency1 = ImageType(name: "currency-1")
        public static let currency2 = ImageType(name: "currency-2")
        public static let currency3 = ImageType(name: "currency-3")
        public static let currency4 = ImageType(name: "currency-4")
        public static let dapps0 = ImageType(name: "dapps-0")
        public static let dapps1 = ImageType(name: "dapps-1")
        public static let dapps2 = ImageType(name: "dapps-2")
        public static let dapps3 = ImageType(name: "dapps-3")
        public static let dapps4 = ImageType(name: "dapps-4")
        public static let dapps5 = ImageType(name: "dapps-5")
        public static let handWithCard = ImageType(name: "hand_with_card")
        public static let tangemCard = ImageType(name: "tangem-card")
        public static let tangemBox = ImageType(name: "tangem_box")
        public static let tangemMain = ImageType(name: "tangem_main")
      }
      public enum TokenItemContextMenu {
        public static let menuArrowDownMini = ImageType(name: "menu_arrow_down_mini")
        public static let menuArrowRightUpMini = ImageType(name: "menu_arrow_right_up_mini")
        public static let menuArrowUpMini = ImageType(name: "menu_arrow_up_mini")
        public static let menuCopy = ImageType(name: "menu_copy")
        public static let menuExchangeMini = ImageType(name: "menu_exchange_mini")
        public static let menuPlusMini = ImageType(name: "menu_plus_mini")
        public static let menuStaking = ImageType(name: "menu_staking")
      }
      public enum WalletConnect {
        public static let miniCheck = ImageType(name: "miniCheck")
        public static let walletConnectNew = ImageType(name: "wallet_connect-new")
        public static let yellowWarningCircle = ImageType(name: "yellowWarningCircle")
      }
      public static let approve = ImageType(name: "approve")
      public static let arrowDownMini = ImageType(name: "arrowDownMini")
      public static let arrowLeftMini = ImageType(name: "arrowLeftMini")
      public static let arrowRightMini = ImageType(name: "arrowRightMini")
      public static let arrowRightUp = ImageType(name: "arrowRightUp")
      public static let arrowUpMini = ImageType(name: "arrowUpMini")
      public static let attention = ImageType(name: "attention")
      public static let attentionRed = ImageType(name: "attention.red")
      public static let attention20 = ImageType(name: "attention20")
      public static let attentionShield = ImageType(name: "attentionShield")
      public static let blueCircleWarning = ImageType(name: "blueCircleWarning")
      public static let cards = ImageType(name: "cards")
      public static let changellyIcon = ImageType(name: "changellyIcon")
      public static let chartMini20 = ImageType(name: "chartMini20")
      public static let check = ImageType(name: "check")
      public static let checkmark20 = ImageType(name: "checkmark20")
      public static let chevron = ImageType(name: "chevron")
      public static let chevronDown12 = ImageType(name: "chevronDown12")
      public static let chevronDown24 = ImageType(name: "chevronDown24")
      public static let chevronDownMini = ImageType(name: "chevronDownMini")
      public static let chevronRight = ImageType(name: "chevronRight")
      public static let chevronRightWithOffset24 = ImageType(name: "chevronRightWithOffset24")
      public static let circleChecked = ImageType(name: "circleChecked")
      public static let circleEmpty = ImageType(name: "circleEmpty")
      public static let circleOutline20 = ImageType(name: "circleOutline20")
      public static let close = ImageType(name: "close")
      public static let cog24 = ImageType(name: "cog24")
      public static let compass = ImageType(name: "compass")
      public static let compassBig = ImageType(name: "compassBig")
      public static let compassExplore = ImageType(name: "compassExplore")
      public static let copyNew = ImageType(name: "copy-new")
      public static let criticalAttentionShield = ImageType(name: "criticalAttentionShield")
      public static let cross = ImageType(name: "cross")
      public static let cross20 = ImageType(name: "cross20")
      public static let crossBig = ImageType(name: "crossBig")
      public static let crossBlack = ImageType(name: "crossBlack")
      public static let crossedEyeIcon = ImageType(name: "crossedEyeIcon")
      public static let cryptoCurrencies = ImageType(name: "cryptoCurrencies")
      public static let customTokenStar = ImageType(name: "custom.token.star")
      public static let discount = ImageType(name: "discount")
      public static let dollar = ImageType(name: "dollar")
      public static let dollarMini = ImageType(name: "dollarMini")
      public static let emptyHistory = ImageType(name: "emptyHistory")
      public static let emptyTokenList = ImageType(name: "empty_token_list")
      public static let exchangeMini = ImageType(name: "exchangeMini")
      public static let exclamationMark20 = ImageType(name: "exclamationMark20")
      public static let expressMoreProvidersIcon = ImageType(name: "expressMoreProvidersIcon")
      public static let eyeIconMini = ImageType(name: "eyeIconMini")
      public static let failedCloud = ImageType(name: "failedCloud")
      public static let fiatIconPlaceholder = ImageType(name: "fiat-icon-placeholder")
      public static let fileExclamationMark = ImageType(name: "fileExclamationMark")
      public static let flash = ImageType(name: "flash")
      public static let flashDisabled = ImageType(name: "flash_disabled")
      public static let gallery = ImageType(name: "gallery")
      public static let hand = ImageType(name: "hand")
      public static let hideKeyboard = ImageType(name: "hideKeyboard")
      public static let horizontalDots = ImageType(name: "horizontalDots")
      public static let inProgress = ImageType(name: "in-progress")
      public static let infinityMini = ImageType(name: "infinityMini")
      public static let infoCircle16 = ImageType(name: "infoCircle16")
      public static let infoCircle20 = ImageType(name: "infoCircle20")
      public static let infoCircle36 = ImageType(name: "infoCircle36")
      public static let infoIconMini = ImageType(name: "infoIconMini")
      public enum Kyc {
        public static let emailVerification = ImageType(name: "emailVerification")
        public static let identityDocument = ImageType(name: "identityDocument")
        public static let phoneVerification = ImageType(name: "phoneVerification")
        public static let profileDetails = ImageType(name: "profileDetails")
        public static let proofOfAddress = ImageType(name: "proofOfAddress")
        public static let questionnaire = ImageType(name: "questionnaire")
        public static let selfie = ImageType(name: "selfie")
      }
      public static let lock = ImageType(name: "lock")
      public static let lock24 = ImageType(name: "lock24")
      public static let lockBig = ImageType(name: "lockBig")
      public static let lockedRefresh = ImageType(name: "lockedRefresh")
      public static let logo1inch = ImageType(name: "logo1inch")
      public static let minusCircle = ImageType(name: "minus_circle")
      public static let newTangemLogo = ImageType(name: "newTangemLogo")
      public static let plus14 = ImageType(name: "plus14")
      public static let plus24 = ImageType(name: "plus24")
      public static let plusMini = ImageType(name: "plusMini")
      public static let promoRingBg = ImageType(name: "promo_ring_bg")
      public static let promoRingIcon = ImageType(name: "promo_ring_icon")
      public static let pushEligibleNetworks = ImageType(name: "pushEligibleNetworks")
      public static let qrCode = ImageType(name: "qr-code")
      public static let qrNew = ImageType(name: "qr-new")
      public static let quoteNegative = ImageType(name: "quoteNegative")
      public static let quoteNeutral = ImageType(name: "quoteNeutral")
      public static let quotePositive = ImageType(name: "quotePositive")
      public static let redCircleWarning = ImageType(name: "redCircleWarning")
      public static let referralDude = ImageType(name: "referral_dude")
      public static let refreshWarningIcon = ImageType(name: "refreshWarningIcon")
      public static let roundArrow24 = ImageType(name: "roundArrow24")
      public static let save = ImageType(name: "save")
      public static let scan = ImageType(name: "scan")
      public static let search = ImageType(name: "search")
      public static let share = ImageType(name: "share")
      public static let shopBag = ImageType(name: "shopBag")
      public static let sliders = ImageType(name: "sliders")
      public static let speedMiniIcon = ImageType(name: "speedMiniIcon")
      public static let stakingIcon = ImageType(name: "stakingIcon")
      public static let stakingIconFilled = ImageType(name: "stakingIconFilled")
      public static let stakingLockIcon = ImageType(name: "stakingLockIcon")
      public static let stakingMiniIcon = ImageType(name: "stakingMiniIcon")
      public static let stakingUnlockingIcon = ImageType(name: "stakingUnlockingIcon")
      public static let star = ImageType(name: "star")
      public static let stars = ImageType(name: "stars")
      public static let successBigIcon = ImageType(name: "successBigIcon")
      public static let successWaiting = ImageType(name: "success_waiting")
      public static let swapHeart = ImageType(name: "swapHeart")
      public static let swapInProcessIcon = ImageType(name: "swapInProcessIcon")
      public static let swapLock = ImageType(name: "swapLock")
      public static let swappingIcon = ImageType(name: "swappingIcon")
      public static let tangemIcon = ImageType(name: "tangemIcon")
      public static let tangemIcon36 = ImageType(name: "tangemIcon36")
      public static let tangemIconBig = ImageType(name: "tangemIconBig")
      public static let tangemIconMedium = ImageType(name: "tangemIconMedium")
      public static let tangemLogo = ImageType(name: "tangemLogo")
      public static let unstakedIcon = ImageType(name: "unstakedIcon")
      public static let verticalDots = ImageType(name: "verticalDots")
      public static let verticalLine = ImageType(name: "verticalLine")
      public enum Visa {
        public static let analyticsUp = ImageType(name: "analytics-up")
        public static let securityCheck = ImageType(name: "security-check")
        public static let shoppingBasket01 = ImageType(name: "shopping-basket-01")
        public static let card = ImageType(name: "visa_card")
      }
      public static let wallet36 = ImageType(name: "wallet36")
      public static let walletConnect = ImageType(name: "walletConnect")
      public static let walletPromoImage = ImageType(name: "walletPromoImage")
      public static let warningIcon = ImageType(name: "warningIcon")
      public static let whatIsStakingBanner = ImageType(name: "whatIsStakingBanner")
      public static let whitepaper = ImageType(name: "whitepaper")
}
public enum Colors {
      public enum Accounts {
        public static let brightBlue = Color(name: "BrightBlue")
        public static let coralRed = Color(name: "CoralRed")
        public static let cyan = Color(name: "Cyan")
        public static let darkGreen = Color(name: "DarkGreen")
        public static let deepPurple = Color(name: "DeepPurple")
        public static let hotPink = Color(name: "HotPink")
        public static let lavender = Color(name: "Lavender")
        public static let magenta = Color(name: "Magenta")
        public static let mediumGreen = Color(name: "MediumGreen")
        public static let purple = Color(name: "Purple")
        public static let royalBlue = Color(name: "RoyalBlue")
        public static let yellow = Color(name: "Yellow")
      }
      public enum Background {
        public static let action = Color(name: "BackgroundAction")
        public static let fadeEnd = Color(name: "BackgroundFadeEnd")
        public static let fadeStart = Color(name: "BackgroundFadeStart")
        public static let plain = Color(name: "BackgroundPlain")
        public static let primary = Color(name: "BackgroundPrimary")
        public static let secondary = Color(name: "BackgroundSecondary")
        public static let stakingNotification = Color(name: "BackgroundStakingNotification")
        public static let tertiary = Color(name: "BackgroundTertiary")
      }
      public enum Button {
        public static let disabled = Color(name: "ButtonDisabled")
        public static let expressPromotion = Color(name: "ButtonExpressPromotion")
        public static let paste = Color(name: "ButtonPaste")
        public static let positive = Color(name: "ButtonPositive")
        public static let primary = Color(name: "ButtonPrimary")
        public static let secondary = Color(name: "ButtonSecondary")
      }
      public enum Control {
        public static let checked = Color(name: "ControlChecked")
        public static let key = Color(name: "ControlKey")
        public static let shimmer = Color(name: "ControlShimmer")
        public static let unchecked = Color(name: "ControlUnchecked")
      }
      public enum Field {
        public static let focused = Color(name: "FieldFocused")
        public static let primary = Color(name: "FieldPrimary")
      }
      public enum Icon {
        public static let accent = Color(name: "IconAccent")
        public static let attention = Color(name: "IconAttention")
        public static let constant = Color(name: "IconConstant")
        public static let inactive = Color(name: "IconInactive")
        public static let informative = Color(name: "IconInformative")
        public static let primary1 = Color(name: "IconPrimary1")
        public static let primary2 = Color(name: "IconPrimary2")
        public static let secondary = Color(name: "IconSecondary")
        public static let warning = Color(name: "IconWarning")
      }
      public enum Old {
        public enum OneInch {
          public static let blueGradientStart = Color(name: "OneInchBlueGradientStart")
          public static let blueGradientStop = Color(name: "OneInchBlueGradientStop")
          public static let pinkGradientStart = Color(name: "OneInchPinkGradientStart")
          public static let pinkGradientStop = Color(name: "OneInchPinkGradientStop")
          public static let redGradientStart = Color(name: "OneInchRedGradientStart")
          public static let redGradientStop = Color(name: "OneInchRedGradientStop")
        }
        public static let manageTokensContractName = Color(name: "manage_tokens_contract_name")
        public static let manageTokensGrayText = Color(name: "manage_tokens_gray_text")
        public static let manageTokensNetworkName = Color(name: "manage_tokens_network_name")
        public static let onboardingTwinWave1 = Color(name: "onboarding_twin_wave_1")
        public static let onboardingTwinWave2 = Color(name: "onboarding_twin_wave_2")
        public static let onboardingTwinWave3 = Color(name: "onboarding_twin_wave_3")
        public static let tangemBg = Color(name: "tangem_bg")
        public static let tangemBgGray = Color(name: "tangem_bg_gray")
        public static let tangemBlue = Color(name: "tangem_blue")
        public static let tangemBtnHoverBg = Color(name: "tangem_btn_hover_bg")
        public static let tangemGrayDark = Color(name: "tangem_gray_dark")
        public static let tangemGrayDark3 = Color(name: "tangem_gray_dark3")
        public static let tangemGrayDark4 = Color(name: "tangem_gray_dark4")
        public static let tangemGrayDark5 = Color(name: "tangem_gray_dark5")
        public static let tangemGrayDark6 = Color(name: "tangem_gray_dark6")
        public static let tangemGrayLight4 = Color(name: "tangem_gray_light4")
        public static let tangemGrayLight5 = Color(name: "tangem_gray_light5")
        public static let tangemSkeletonGray = Color(name: "tangem_skeleton_gray")
        public static let tangemSkeletonGray2 = Color(name: "tangem_skeleton_gray2")
        public static let tangemSkeletonGray3 = Color(name: "tangem_skeleton_gray3")
        public static let tangemStoryBackground = Color(name: "tangem_story_background")
        public static let tangemWarning = Color(name: "tangem_warning")
      }
      public enum Overlays {
        public static let overlayPrimary = Color(name: "OverlayPrimary")
        public static let overlaySecondary = Color(name: "OverlaySecondary")
      }
      public enum Stroke {
        public static let primary = Color(name: "StrokePrimary")
        public static let secondary = Color(name: "StrokeSecondary")
        public static let transparency = Color(name: "StrokeTransparency")
      }
      public enum Text {
        public static let accent = Color(name: "TextAccent")
        public static let attention = Color(name: "TextAttention")
        public static let constantWhite = Color(name: "TextConstantWhite")
        public static let disabled = Color(name: "TextDisabled")
        public static let expressPromotionButton = Color(name: "TextExpressPromotionButton")
        public static let primary1 = Color(name: "TextPrimary1")
        public static let primary2 = Color(name: "TextPrimary2")
        public static let secondary = Color(name: "TextSecondary")
        public static let stakingGradient = Color(name: "TextStakingGradient")
        public static let tertiary = Color(name: "TextTertiary")
        public static let warning = Color(name: "TextWarning")
      }
}
public enum Tokens {
      public static let alephiumFill = ImageType(name: "alephium.fill")
      public static let alephium = ImageType(name: "alephium")
      public static let algorandFill = ImageType(name: "algorand.fill")
      public static let algorand = ImageType(name: "algorand")
      public static let apechainFill = ImageType(name: "apechain.fill")
      public static let apechain = ImageType(name: "apechain")
      public static let aptosFill = ImageType(name: "aptos.fill")
      public static let aptos = ImageType(name: "aptos")
      public static let arbitrumFill = ImageType(name: "arbitrum.fill")
      public static let arbitrum = ImageType(name: "arbitrum")
      public static let areonFill = ImageType(name: "areon.fill")
      public static let areon = ImageType(name: "areon")
      public static let auroraFill = ImageType(name: "aurora.fill")
      public static let aurora = ImageType(name: "aurora")
      public static let avalancheFill = ImageType(name: "avalanche.fill")
      public static let avalanche = ImageType(name: "avalanche")
      public static let azeroFill = ImageType(name: "azero.fill")
      public static let azero = ImageType(name: "azero")
      public static let baseFill = ImageType(name: "base.fill")
      public static let base = ImageType(name: "base")
      public static let binanceFill = ImageType(name: "binance.fill")
      public static let bitcoinFill = ImageType(name: "bitcoin.fill")
      public static let bitcoin = ImageType(name: "bitcoin")
      public static let bitcoincashFill = ImageType(name: "bitcoincash.fill")
      public static let bitcoincash = ImageType(name: "bitcoincash")
      public static let bitrockFill = ImageType(name: "bitrock.fill")
      public static let bitrock = ImageType(name: "bitrock")
      public static let bittensorFill = ImageType(name: "bittensor.fill")
      public static let bittensor = ImageType(name: "bittensor")
      public static let blastFill = ImageType(name: "blast.fill")
      public static let blast = ImageType(name: "blast")
      public static let bscFill = ImageType(name: "bsc.fill")
      public static let bsc = ImageType(name: "bsc")
      public static let canxiumFill = ImageType(name: "canxium.fill")
      public static let canxium = ImageType(name: "canxium")
      public static let cardanoFill = ImageType(name: "cardano.fill")
      public static let cardano = ImageType(name: "cardano")
      public static let casperFill = ImageType(name: "casper.fill")
      public static let casper = ImageType(name: "casper")
      public static let chiaFill = ImageType(name: "chia.fill")
      public static let chia = ImageType(name: "chia")
      public static let chilizFill = ImageType(name: "chiliz.fill")
      public static let chiliz = ImageType(name: "chiliz")
      public static let cloreFill = ImageType(name: "clore.fill")
      public static let clore = ImageType(name: "clore")
      public static let coreFill = ImageType(name: "core.fill")
      public static let core = ImageType(name: "core")
      public static let cosmosFill = ImageType(name: "cosmos.fill")
      public static let cosmos = ImageType(name: "cosmos")
      public static let cronosFill = ImageType(name: "cronos.fill")
      public static let cronos = ImageType(name: "cronos")
      public static let cyberFill = ImageType(name: "cyber.fill")
      public static let cyber = ImageType(name: "cyber")
      public static let dashFill = ImageType(name: "dash.fill")
      public static let dash = ImageType(name: "dash")
      public static let decimalFill = ImageType(name: "decimal.fill")
      public static let decimal = ImageType(name: "decimal")
      public static let dischainFill = ImageType(name: "dischain.fill")
      public static let dischain = ImageType(name: "dischain")
      public static let dogecoinFill = ImageType(name: "dogecoin.fill")
      public static let dogecoin = ImageType(name: "dogecoin")
      public static let ducatusFill = ImageType(name: "ducatus.fill")
      public static let ducatus = ImageType(name: "ducatus")
      public static let energywebevmFill = ImageType(name: "energywebevm.fill")
      public static let energywebevm = ImageType(name: "energywebevm")
      public static let energywebxFill = ImageType(name: "energywebx.fill")
      public static let energywebx = ImageType(name: "energywebx")
      public static let ethereumFill = ImageType(name: "ethereum.fill")
      public static let ethereum = ImageType(name: "ethereum")
      public static let ethereumclassicFill = ImageType(name: "ethereumclassic.fill")
      public static let ethereumclassic = ImageType(name: "ethereumclassic")
      public static let ethereumpowFill = ImageType(name: "ethereumpow.fill")
      public static let ethereumpow = ImageType(name: "ethereumpow")
      public static let fact0rnFill = ImageType(name: "fact0rn.fill")
      public static let fact0rn = ImageType(name: "fact0rn")
      public static let fantomFill = ImageType(name: "fantom.fill")
      public static let fantom = ImageType(name: "fantom")
      public static let filecoinFill = ImageType(name: "filecoin.fill")
      public static let filecoin = ImageType(name: "filecoin")
      public static let flareFill = ImageType(name: "flare.fill")
      public static let flare = ImageType(name: "flare")
      public static let gnosisFill = ImageType(name: "gnosis.fill")
      public static let gnosis = ImageType(name: "gnosis")
      public static let hederaFill = ImageType(name: "hedera.fill")
      public static let hedera = ImageType(name: "hedera")
      public static let hyperliquidFill = ImageType(name: "hyperliquid.fill")
      public static let hyperliquid = ImageType(name: "hyperliquid")
      public static let internetcomputerFill = ImageType(name: "internetcomputer.fill")
      public static let internetcomputer = ImageType(name: "internetcomputer")
      public static let joystreamFill = ImageType(name: "joystream.fill")
      public static let joystream = ImageType(name: "joystream")
      public static let kaspaFill = ImageType(name: "kaspa.fill")
      public static let kaspa = ImageType(name: "kaspa")
      public static let kavaFill = ImageType(name: "kava.fill")
      public static let kava = ImageType(name: "kava")
      public static let koinosFill = ImageType(name: "koinos.fill")
      public static let koinos = ImageType(name: "koinos")
      public static let kusamaFill = ImageType(name: "kusama.fill")
      public static let kusama = ImageType(name: "kusama")
      public static let litecoinFill = ImageType(name: "litecoin.fill")
      public static let litecoin = ImageType(name: "litecoin")
      public static let mantaFill = ImageType(name: "manta.fill")
      public static let manta = ImageType(name: "manta")
      public static let mantleFill = ImageType(name: "mantle.fill")
      public static let mantle = ImageType(name: "mantle")
      public static let moonbeamFill = ImageType(name: "moonbeam.fill")
      public static let moonbeam = ImageType(name: "moonbeam")
      public static let moonriverFill = ImageType(name: "moonriver.fill")
      public static let moonriver = ImageType(name: "moonriver")
      public static let nearFill = ImageType(name: "near.fill")
      public static let near = ImageType(name: "near")
      public static let octaFill = ImageType(name: "octa.fill")
      public static let octa = ImageType(name: "octa")
      public static let odysseychainFill = ImageType(name: "odysseychain.fill")
      public static let odysseychain = ImageType(name: "odysseychain")
      public static let optimismFill = ImageType(name: "optimism.fill")
      public static let optimism = ImageType(name: "optimism")
      public static let pepecoinFill = ImageType(name: "pepecoin.fill")
      public static let pepecoin = ImageType(name: "pepecoin")
      public static let playa3ullgamesFill = ImageType(name: "playa3ullgames.fill")
      public static let playa3ullgames = ImageType(name: "playa3ullgames")
      public static let polkadotFill = ImageType(name: "polkadot.fill")
      public static let polkadot = ImageType(name: "polkadot")
      public static let polygonFill = ImageType(name: "polygon.fill")
      public static let polygon = ImageType(name: "polygon")
      public static let polygonzkevmFill = ImageType(name: "polygonzkevm.fill")
      public static let polygonzkevm = ImageType(name: "polygonzkevm")
      public static let pulsechainFill = ImageType(name: "pulsechain.fill")
      public static let pulsechain = ImageType(name: "pulsechain")
      public static let radiantFill = ImageType(name: "radiant.fill")
      public static let radiant = ImageType(name: "radiant")
      public static let ravencoinFill = ImageType(name: "ravencoin.fill")
      public static let ravencoin = ImageType(name: "ravencoin")
      public static let rskFill = ImageType(name: "rsk.fill")
      public static let rsk = ImageType(name: "rsk")
      public static let seiFill = ImageType(name: "sei.fill")
      public static let sei = ImageType(name: "sei")
      public static let shibariumFill = ImageType(name: "shibarium.fill")
      public static let shibarium = ImageType(name: "shibarium")
      public static let solanaFill = ImageType(name: "solana.fill")
      public static let solana = ImageType(name: "solana")
      public static let sonicFill = ImageType(name: "sonic.fill")
      public static let sonic = ImageType(name: "sonic")
      public static let stellarFill = ImageType(name: "stellar.fill")
      public static let stellar = ImageType(name: "stellar")
      public static let suiFill = ImageType(name: "sui.fill")
      public static let sui = ImageType(name: "sui")
      public static let taraxaFill = ImageType(name: "taraxa.fill")
      public static let taraxa = ImageType(name: "taraxa")
      public static let telosFill = ImageType(name: "telos.fill")
      public static let telos = ImageType(name: "telos")
      public static let terrav1Fill = ImageType(name: "terrav1.fill")
      public static let terrav1 = ImageType(name: "terrav1")
      public static let terrav2Fill = ImageType(name: "terrav2.fill")
      public static let terrav2 = ImageType(name: "terrav2")
      public static let tezosFill = ImageType(name: "tezos.fill")
      public static let tezos = ImageType(name: "tezos")
      public static let tonFill = ImageType(name: "ton.fill")
      public static let ton = ImageType(name: "ton")
      public static let tronFill = ImageType(name: "tron.fill")
      public static let tron = ImageType(name: "tron")
      public static let vanarFill = ImageType(name: "vanar.fill")
      public static let vanar = ImageType(name: "vanar")
      public static let vechainFill = ImageType(name: "vechain.fill")
      public static let vechain = ImageType(name: "vechain")
      public static let xdcFill = ImageType(name: "xdc.fill")
      public static let xdc = ImageType(name: "xdc")
      public static let xodexFill = ImageType(name: "xodex.fill")
      public static let xodex = ImageType(name: "xodex")
      public static let xrpFill = ImageType(name: "xrp.fill")
      public static let xrp = ImageType(name: "xrp")
      public static let zklinknovaFill = ImageType(name: "zklinknova.fill")
      public static let zklinknova = ImageType(name: "zklinknova")
      public static let zksyncFill = ImageType(name: "zksync.fill")
      public static let zksync = ImageType(name: "zksync")
}

// MARK: - Implementation Details

fileprivate extension Color {
    /// Creates a named color.
    /// - Parameter name: the color resource to lookup.
    init(name: String) {
        self.init(name, bundle: .module)
    }
}

fileprivate extension Image {
    /// Creates a named image.
    /// - Parameter name: the image resource to lookup.
    init(name: String) {
        self.init(name, bundle: .module)
    }
}

fileprivate extension UIImage {
    /// Creates a named image.
    /// - Parameter name: the image resource to lookup.
    convenience init!(name: String) {
        self.init(named: name, in: .module, compatibleWith: nil)
    }
}

#if canImport(SwiftUI)
import SwiftUI

public extension ImageType {
    var image: Image {
        Image(name: name)
    }
}
#endif

#if canImport(UIKit)
import UIKit

public extension ImageType {
    var uiImage: UIImage {
        UIImage(name: name)
    }
}
#endif
