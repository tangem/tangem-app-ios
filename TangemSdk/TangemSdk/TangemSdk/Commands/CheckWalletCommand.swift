//
//  CheckWalletCommand.swift
//  TangemSdk
//
//  Created by [REDACTED_AUTHOR]
//  Copyright Â© 2019 Tangem AG. All rights reserved.
//

import Foundation

/// Deserialized response from the Tangem card after `CheckWalletCommand`.
public struct CheckWalletResponse: TlvCodable {
    /// Unique Tangem card ID number
    public let cardId: String
    /// Random salt generated by the card
    public let salt: Data
    /// Challenge and salt signed with the wallet private key.
    public let walletSignature: Data
}

/// This command proves that the wallet private key from the card corresponds to the wallet public key.  Standard challenge/response scheme is used
@available(iOS 13.0, *)
public final class CheckWalletCommand: Command {
    public typealias CommandResponse = CheckWalletResponse
    /// Random challenge generated by application
    private let challenge: Data
    private let curve: EllipticCurve
    private let publicKey: Data
    
    public init?(curve: EllipticCurve, publicKey: Data) {
        self.curve = curve
        self.publicKey = publicKey
        
        if let challenge = CryptoUtils.generateRandomBytes(count: 16) {
            self.challenge = challenge
        } else {
            return nil
        }
    }
    
    public func run(session: CommandTransiever, viewDelegate: CardManagerDelegate, environment: CardEnvironment, completion: @escaping (Result<CheckWalletResponse, TaskError>) -> Void) {
        session.sendCommand(self, environment: environment) {[weak self] result in
            guard let self = self else { return }
            
            switch result {
            case .success(let checkWalletResponse):
                guard let verifyResult = self.verify(response: checkWalletResponse) else {
                    completion(.failure(.errorProcessingCommand))
                    return
                }
                
                if verifyResult {
                    completion(.success(checkWalletResponse))
                } else {
                    completion(.failure(.verificationFailed))
                }
            case .failure(let error):
                completion(.failure(error))
            }
        }
    }
    
    public func serialize(with environment: CardEnvironment) throws -> CommandApdu {
        let tlvBuilder = try createTlvBuilder(legacyMode: environment.legacyMode)
            .append(.pin, value: environment.pin1)
            .append(.cardId, value: environment.cardId)
            .append(.challenge, value: challenge)
        
        let cApdu = CommandApdu(.checkWallet, tlv: tlvBuilder.serialize())
        return cApdu
    }
    
    public func deserialize(with environment: CardEnvironment, from responseApdu: ResponseApdu) throws -> CheckWalletResponse {
        guard let tlv = responseApdu.getTlvData(encryptionKey: environment.encryptionKey) else {
            throw TaskError.deserializeApduFailed
        }
        
        let mapper = TlvDecoder(tlv: tlv)
        return CheckWalletResponse(
            cardId: try mapper.decode(.cardId),
            salt: try mapper.decode(.salt),
            walletSignature: try mapper.decode(.walletSignature))
    }
    
    private func verify(response: CheckWalletResponse) -> Bool? {
        return CryptoUtils.vefify(curve: curve,
                                  publicKey: publicKey,
                                  message: challenge + response.salt,
                                  signature: response.walletSignature)
    }
}
